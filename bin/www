#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('bratrello');
const http = require('http');
const models = require('../models');
const schedule = require('node-schedule');
const mailer = require('../mailer');
const worker = require('../worker');
const helpers = require('../helpers/parseHelpers');


const port = helpers.normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Create HTTP server.
const server = http.createServer(app);


models.sequelize.sync()
  .then(() => {
    server.listen(port, function() {
      debug('Express server listening on port ' + server.address().port);
    });
    server.on('error', onError);
    server.on('listening', onListening);
});


function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  mailer.init();
  debug('Mailer initialized.');
  
  // schedule a job for every 5 minutes
  var j = schedule.scheduleJob('*/15 * * * * *', function(fireDate){
    worker.sendAllTasks(fireDate);
    console.log('fired at ' + fireDate);
  });
  debug('Scheduled a job');
}


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
